<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>热爱你所热爱</title>
  
  <subtitle>记录成长点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-21T05:00:37.345Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Longwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>细说新技术</title>
    <link href="http://yoursite.com/2018/06/21/%E7%BB%86%E8%AF%B4%E6%96%B0%E6%8E%A5%E8%A7%A6%E7%9A%84%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/06/21/细说新接触的技术/</id>
    <published>2018-06-21T04:51:46.062Z</published>
    <updated>2018-06-21T05:00:37.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="Git，版本管理工具。"><a href="#Git，版本管理工具。" class="headerlink" title="Git，版本管理工具。"></a>Git，版本管理工具。</h4><p>用这个东西几个月了，没什么好说的，就是修改代码，提交代码，推送。 方便多人合作。<br>这个自己可以看一下网上的教程，了解一下每个操作的概念。具体的还得在实际工作中，看下团队的需要，才能知道具体需要用到哪些。<br>Less</p><p>Less是一种动态样式语言,属于CSS预处理语言的一种，和Sass是一个意思。就是通过一些嵌套，mixin，变量等。编译出你需要的CSS。让你自己写的样式更少些。</p><p>例如：</p><p>base.less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">box&#123;</span><br><span class="line">    @color1: red;</span><br><span class="line">    @color2: blue;</span><br><span class="line">    span&#123;</span><br><span class="line">        background: @color1;</span><br><span class="line">    &#125;</span><br><span class="line">    a&#123;</span><br><span class="line">        color: @color2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的CSS为</p><p>base.css<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#box span&#123;</span></span><br><span class="line">background: red;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">#box a &#123; </span></span><br><span class="line">color: blue;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><h3 id="AngularJs是MVVM的模式。Model-View-ViewModel。"><a href="#AngularJs是MVVM的模式。Model-View-ViewModel。" class="headerlink" title="AngularJs是MVVM的模式。Model,View,ViewModel。"></a>AngularJs是MVVM的模式。Model,View,ViewModel。</h3><p> 就是Model的数据发生改变时，View层的表现也会同时发生变化。<br> View层的数据发生改变时，Model里的数据也会随之改变。<br> 不需要写任何的事件操作。只需要绑定一下模型。</p><p> 这个跟着看了一遍文档教程,跟着视频走了一遍,Demo写了一些。</p><h3 id="requireJs"><a href="#requireJs" class="headerlink" title="requireJs"></a>requireJs</h3><p> RequireJS的目标是鼓励代码的模块化，它使用了不同于传统script标签的脚本加载步骤。<br> 可以用它来加速、优化代码，但其主要目的还是为了代码的模块化。它鼓励在使用脚本时以module ID替代URL地址</p><h4 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h4><p> handlebars.js<br> template.js<br> 这里的模版引擎仅仅是为了”不拼字符串”。具体的操作也没什么好说的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h3&gt;&lt;h4 id=&quot;Git，版本管理工具。&quot;&gt;&lt;a href=&quot;#Git，版本管理工具。&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue基本配置和生命周期</title>
    <link href="http://yoursite.com/2018/06/15/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B9%8BVue%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/06/15/Vue入门系列之Vue实例详解与生命周期/</id>
    <published>2018-06-15T00:53:10.778Z</published>
    <updated>2018-06-21T00:26:29.678Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的实例是Vue框架的入口，其实也就是前端的ViewModel，它包含了页面中的业务逻辑处理、数据模型等，当然它也有自己的一系列的生命周期的事件钩子，辅助我们进行对整个Vue实例生成、编译、挂着、销毁等过程进行js控制。</p><p>#</p><h4 id="5-1-Vue实例初始化的选项配置对象详解"><a href="#5-1-Vue实例初始化的选项配置对象详解" class="headerlink" title="5.1. Vue实例初始化的选项配置对象详解"></a>5.1. Vue实例初始化的选项配置对象详解</h4><p>前面我们已经用了很多次new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。更详细的请参考官网内容</p><h4 id="5-1-1-Vue实例的的data对象"><a href="#5-1-1-Vue实例的的data对象" class="headerlink" title="5.1.1. Vue实例的的data对象"></a>5.1.1. Vue实例的的data对象</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。</p><p>data对象的类型：</p><p>类型是Object或者Function。</p><p>如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">// 创建普通的Vue实例</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  data: data</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件定义【后面会详细讲的】</span><br><span class="line"></span><br><span class="line">// Vue.extend() 中 data 必须是函数</span><br><span class="line"></span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line"></span><br><span class="line">  data: function () &#123;  //这里必须是函数！！！！</span><br><span class="line"></span><br><span class="line">    return &#123; a: 1 &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-1-2-Vue实例的computed"><a href="#5-1-2-Vue实例的computed" class="headerlink" title="5.1.2. Vue实例的computed"></a>5.1.2. Vue实例的computed</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，再计算属性中定义的函数里面可以直接使用指向了vue实例的this，异常方便的啊。</p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>{ 键：函数}{ [key: string]: Function | { get: Function, set: Function } }当然，可以省略setter,如果省略了setter，那么值就可以是普通函数，但是必须有返回值。</p><h5 id="官方的实例"><a href="#官方的实例" class="headerlink" title="官方的实例"></a>官方的实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">data: &#123; a: 1 &#125;,</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line"></span><br><span class="line">  // 仅读取，值只须为函数</span><br><span class="line"></span><br><span class="line">  aDouble: function () &#123;</span><br><span class="line"></span><br><span class="line">    return this.a * 2</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 读取和设置</span><br><span class="line"></span><br><span class="line">  aPlus: &#123;</span><br><span class="line"></span><br><span class="line">    get: function () &#123;</span><br><span class="line"></span><br><span class="line">      return this.a + 1</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set: function (v) &#123;</span><br><span class="line"></span><br><span class="line">      this.a = v - 1</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.aPlus  // -&gt; 2</span><br><span class="line"></span><br><span class="line">vm.aPlus = 3</span><br><span class="line"></span><br><span class="line">vm.a      // -&gt; 2</span><br><span class="line"></span><br><span class="line">vm.aDouble // -&gt; 4</span><br><span class="line"></span><br><span class="line">5.1.3. methods</span><br><span class="line"></span><br><span class="line">类型: &#123; [key: string]: Function &#125;</span><br></pre></td></tr></table></figure><h5 id="详细"><a href="#详细" class="headerlink" title="详细:"></a>详细:</h5><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p><p>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  data: &#123; a: 1 &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    plus: function () &#123;</span><br><span class="line"></span><br><span class="line">      this.a++</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.plus()</span><br><span class="line"></span><br><span class="line">vm.a // 2</span><br><span class="line"></span><br><span class="line">5.1.4. watch</span><br><span class="line"></span><br><span class="line">类型</span><br><span class="line"></span><br><span class="line">&#123; [key: string]: string | Function | Object &#125;</span><br></pre></td></tr></table></figure><h5 id="详细-1"><a href="#详细-1" class="headerlink" title="详细:"></a>详细:</h5><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  data: &#123;</span><br><span class="line"></span><br><span class="line">    a: 1,</span><br><span class="line"></span><br><span class="line">    b: 2,</span><br><span class="line"></span><br><span class="line">    c: 3</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line"></span><br><span class="line">    // 监控a变量变化的时候，自动执行此函数</span><br><span class="line"></span><br><span class="line">    a: function (val, oldVal) &#123;</span><br><span class="line"></span><br><span class="line">      console.log(&apos;new: %s, old: %s&apos;, val, oldVal)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 深度 watcher</span><br><span class="line"></span><br><span class="line">    c: &#123;</span><br><span class="line"></span><br><span class="line">      handler: function (val, oldVal) &#123; /* ... */ &#125;,</span><br><span class="line"></span><br><span class="line">      deep: true</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.a = 2 // -&gt; new: 2, old: 1</span><br></pre></td></tr></table></figure><p>//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</p><h5 id="参考综合案例"><a href="#参考综合案例" class="headerlink" title="参考综合案例:"></a>参考综合案例:</h5><h4 id="5-1-5-设置el的详解"><a href="#5-1-5-设置el的详解" class="headerlink" title="5.1.5. 设置el的详解"></a>5.1.5. 设置el的详解</h4><p>类型</p><p>string | HTMLElement</p><p>限制： 只在由 new 创建的实例中遵守。</p><p>详细：</p><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标,也就是说Vue绑定数据到哪里去找。可以是CSS 选择器，也可以是一个HTMLElement实例。</p><p>在实例挂载之后(生命周期的内容后面会详细讲的奥)， 元素可以用 vm.$el 访问。</p><p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p><p>// 几乎所有例子都用到这个，所以就不再赘述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;       </span><br><span class="line"></span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5-2-Vue实例的生命周期"><a href="#5-2-Vue实例的生命周期" class="headerlink" title="5.2. Vue实例的生命周期"></a>5.2. Vue实例的生命周期</h5><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，哇赛，如果你搞过Asp.Net WebForm的话，你会发现整个就是WebForm的翻版嘛哈哈。值得注意的是，在这些事件响应方法中的this直接指向的是vue的实例。</p><p>首先看看下面官网的一张生命周期的图，我做一下标注，看看整体的流程，后面我们上代码做一下效果。</p><p>Vue提供的可以注册的钩子都在上图片的红色框标注。 他们是：</p><p>beforeCreate</p><p>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p><p>created</p><p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p>beforeMount</p><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>mounted</p><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p>beforeUpdate</p><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>updated</p><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p><p>该钩子在服务器端渲染期间不被调用。</p><p>beforeDestroy</p><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>destroyed</p><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p><p>接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。</p><p>再看一个综合的实战的例子，可能涉及到ajax和组件，不过先看一下vue的生命周期的例子的用法：</p><p>import Axios from ‘axios’      // 这是一个轻量级的ajax库，import是es6模块导入的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;                // 这是一个vue的模块，后面讲奥。</span><br><span class="line"></span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data: function () &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      list: []</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted: function () &#123;          // 挂在完成后的生命周期钩子注册。</span><br><span class="line"></span><br><span class="line">    this.$nextTick(function () &#123;  // 等待下一次更新完成后执行业务处理代码。</span><br><span class="line"></span><br><span class="line">      Axios.get(&apos;/api/menulist&apos;, &#123;// 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span><br><span class="line"></span><br><span class="line">        params: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;).then(function (res) &#123;</span><br><span class="line"></span><br><span class="line">        this.list = res.data</span><br><span class="line"></span><br><span class="line">      &#125;.bind(this))</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-Vue实例的全局配置"><a href="#5-3-Vue实例的全局配置" class="headerlink" title="5.3. Vue实例的全局配置"></a>5.3. Vue实例的全局配置</h4><p>这一块都是一些小的知识点，我就不赘述了，直接copy官网Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">silent</span><br><span class="line"></span><br><span class="line">类型： boolean</span><br><span class="line"></span><br><span class="line">默认值： false</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line"></span><br><span class="line">Vue.config.silent = true</span><br><span class="line"></span><br><span class="line">//取消 Vue 所有的日志与警告。</span><br><span class="line"></span><br><span class="line">optionMergeStrategies</span><br><span class="line"></span><br><span class="line">类型： &#123; [key: string]: Function &#125;</span><br><span class="line"></span><br><span class="line">默认值： &#123;&#125;</span><br><span class="line"></span><br><span class="line">用法：</span><br><span class="line"></span><br><span class="line">Vue.config.optionMergeStrategies._my_option = function (parent, child, vm) &#123;</span><br><span class="line"></span><br><span class="line">return child + 1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Profile = Vue.extend(&#123;</span><br><span class="line"></span><br><span class="line">_my_option: 1</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Profile.options._my_option = 2</span><br></pre></td></tr></table></figure><p>//自定义合并策略的选项。</p><p>//合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入。</p><p>devtools</p><p>类型： boolean</p><p>默认值： true (生产版为 false)</p><p>用法：</p><p>// 务必在加载 Vue 之后，立即同步设置以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.devtools = true</span><br></pre></td></tr></table></figure><p>//配置是否允许 vue-devtools 检查代码。开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查。</p><p>errorHandler</p><p>类型： Function</p><p>默认值： 默认抛出错误</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = function (err, vm) &#123;</span><br><span class="line"></span><br><span class="line">// handle error</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Sentry, an error tracking service, provides official integration using this option.</span><br><span class="line"></span><br><span class="line">ignoredElements</span><br><span class="line"></span><br><span class="line">类型: Array</span><br><span class="line"></span><br><span class="line">默认值: []</span><br></pre></td></tr></table></figure><p>用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [</span><br><span class="line"></span><br><span class="line">&apos;my-custom-web-component&apos;, &apos;another-web-component&apos;</span><br></pre></td></tr></table></figure><p>]</p><p>须使 Vue 忽略在 Vue 之外的自定义元素 (e.g., 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。</p><p>keyCodes</p><p>类型： { [key: string]: number | Array }</p><p>默认值： {}</p><p>用法：</p><p>Vue.config.keyCodes = {</p><p>v: 86,</p><p>f1: 112,</p><p>mediaPlayPause: 179,</p><p>up: [38, 87]</p><p>}api</p><p>//给 v-on 自定义键位别名。</p><p>5.4. Vue的全局API</p><p>Vue的全局API提供大量的功能，我这里就给大家罗列几个常用的结果，其他的还是参考官网.</p><p>5.4.1. Vue.nextTick</p><p>语法： Vue.nextTick( [callback, context] )</p><p>参数：   </p><p>{Function} [callback]</p><p>{Object} [context]</p><p>用法： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>// 修改数据</p><p>vm.msg = ‘Hello’</p><p>// DOM 还没有更新</p><p>Vue.nextTick(function () {</p><p>  // DOM 更新了</p><p>})</p><p>5.4.2. Vue.set</p><p>语法： Vue.set( object, key, value )</p><p>参数：</p><p>{Object} object</p><p>{string} key</p><p>{any} value</p><p>返回值： 设置的值.</p><p>用法：</p><p>设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。 注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p><p>5.4.3. Vue.compile</p><p>语法：</p><p>Vue.compile( template )</p><p>参数：</p><p>{string} template</p><p>用法：</p><p>//在render函数中编译模板字符串。只在独立构建时有效</p><p>var res = Vue.compile(‘</p><p>‘)<br>new Vue({</p><p>  data: {</p><pre><code>msg: &apos;hello&apos;</code></pre><p>  },</p><p>  render: res.render,</p><p>  staticRenderFns: res.staticRenderFns</p><p>})</p><p>5.4.4. 全局API总结</p><p>其实还有几个其他的全局API，不打算在这里讲了，比如扩展组件Vue.extend 的用法、Vue.use加载插件、Vue.filter加载过滤器、Vue.directive自定义指令等 后面再讲其他Vue的知识点的时候，再加上这些，全局API其实就是Vue类型的静态方法，全局范围内都可以使用的，某些实例的方法本质也是调用了这些全局的，后面用到时候再说。</p><p>5.5. Vue实例与生命周期总结</p><p>Vue的实例封装的还是挺有艺术性的，很符合开发者的思维规范，它的生命周期也非常清晰，使用起来也非常方便。Vue确实一个好框架。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue的实例是Vue框架的入口，其实也就是前端的ViewModel，它包含了页面中的业务逻辑处理、数据模型等，当然它也有自己的一系列的生命周期的事件钩子，辅助我们进行对整个Vue实例生成、编译、挂着、销毁等过程进行js控制。&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;h4 id=&quot;5-1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jsonp解析</title>
    <link href="http://yoursite.com/2018/06/14/%E8%AF%A6%E8%A7%A3jsonp/"/>
    <id>http://yoursite.com/2018/06/14/详解jsonp/</id>
    <published>2018-06-14T01:31:36.842Z</published>
    <updated>2018-06-14T01:32:19.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是JSONP"><a href="#什么是JSONP" class="headerlink" title="什么是JSONP"></a>什么是JSONP</h2><p>首先提一下JSON这个概念，JSON是一种轻量级的数据传输格式，被广泛应用于当前Web应用中。JSON格式数据的编码和解析基本在所有主流语言中都被实现，所以现在大部分前后端分离的架构都以JSON格式进行数据的传输。</p><h3 id="那么JSONP是什么呢？"><a href="#那么JSONP是什么呢？" class="headerlink" title="那么JSONP是什么呢？"></a>那么JSONP是什么呢？</h3><p>首先抛出浏览器同源策略这个概念，为了保证用户访问的安全，现代浏览器使用了同源策略，即不允许访问非同源的页面，详细的概念大家可以自行百度。这里大家只要知道，在ajax中，不允许请求非同源的URL就可以了，比如<a href="http://www.a.com下的一个页面，其中的ajax请求是不允许访问www.b.com/c.php这样一个页面的。" target="_blank" rel="noopener">www.a.com下的一个页面，其中的ajax请求是不允许访问www.b.com/c.php这样一个页面的。</a></p><p>JSONP就是用来解决跨域请求问题的，那么具体是怎么实现的呢？</p><h3 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h3><p>ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p><h3 id="JSONP具体实现"><a href="#JSONP具体实现" class="headerlink" title="JSONP具体实现"></a>JSONP具体实现</h3><p>1.首先看下ajax中如果进行跨域请求会如何。<br>前端代码在域<a href="http://www.practice.com下面，使用ajax发送了一个跨域的get请求" target="_blank" rel="noopener">www.practice.com下面，使用ajax发送了一个跨域的get请求</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;GoJSONP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function jsonhandle(data)&#123;</span><br><span class="line">        alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.8.3.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type : &quot;get&quot;,</span><br><span class="line">            async: false,</span><br><span class="line">            url : &quot;http://www.practice-zhao.com/student.php?id=1&quot;,</span><br><span class="line">            type: &quot;json&quot;,</span><br><span class="line">            success : function(data) &#123;</span><br><span class="line">                jsonhandle(data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后端PHP代码放在域www.practice-zhao.com下，简单的输出一段json格式的数据</span><br><span class="line"></span><br><span class="line">jsonhandle(&#123;</span><br><span class="line">    &quot;age&quot; : 15,</span><br><span class="line">    &quot;name&quot;: &quot;John&quot;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当访问前端代码http://www.practice.com/gojsonp/index.html 时 chrome报以下错误 </span><br><span class="line">这里写图片描述</span><br><span class="line">提示了不同源的URL禁止访问</span><br></pre></td></tr></table></figure><p>2.下面使用JSONP，将前端代码中的ajax请求去掉，添加了一个script标签，标签的src指向了另一个域<a href="http://www.practice-zhao.com下的remote.js脚本" target="_blank" rel="noopener">www.practice-zhao.com下的remote.js脚本</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;GoJSONP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function jsonhandle(data)&#123;</span><br><span class="line">        alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.8.3.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.practice-zhao.com/remote.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里调用了跨域的remote.js脚本，remote.js代码如下：</span><br><span class="line"></span><br><span class="line">jsonhandle(&#123;</span><br><span class="line">    &quot;age&quot; : 15,</span><br><span class="line">    &quot;name&quot;: &quot;John&quot;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也就是这段远程的js代码执行了上面定义的函数，弹出了提示框<br>这里写图片描述</p><p>3.将前端代码再进行修改，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;GoJSONP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function jsonhandle(data)&#123;</span><br><span class="line">        alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.8.3.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function()&#123;</span><br><span class="line">        var url = &quot;http://www.practice-zhao.com/student.php?id=1&amp;callback=jsonhandle&quot;;</span><br><span class="line">        var obj = $(&apos;&lt;script&gt;&lt;\/script&gt;&apos;);</span><br><span class="line">        obj.attr(&quot;src&quot;,url);</span><br><span class="line">        $(&quot;body&quot;).append(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里动态的添加了一个script标签，src指向跨域的一个php脚本，并且将上面的js函数名作为callback参数传入，那么我们看下PHP代码怎么写的：</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$data = array(</span><br><span class="line">    &apos;age&apos; =&gt; 20,</span><br><span class="line">    &apos;name&apos; =&gt; &apos;张三&apos;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$callback = $_GET[&apos;callback&apos;];</span><br><span class="line"></span><br><span class="line">echo $callback.&quot;(&quot;.json_encode($data).&quot;)&quot;;</span><br><span class="line">return;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHP代码返回了一段JS语句，即</span><br><span class="line"></span><br><span class="line">jsonhandle(&#123;</span><br><span class="line">    &quot;age&quot; : 15,</span><br><span class="line">    &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时访问页面时，动态添加了一个script标签，src指向PHP脚本，执行返回的JS代码，成功弹出提示框。<br>所以JSONP将访问跨域请求变成了执行远程JS代码，服务端不再返回JSON格式的数据，而是返回了一段将JSON数据作为传入参数的函数执行代码。</p><p>4.最后jQuery提供了方便使用JSONP的方式，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;GoJSONP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.8.3.min.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type : &quot;get&quot;,</span><br><span class="line">            async: false,</span><br><span class="line">            url : &quot;http://www.practice-zhao.com/student.php?id=1&quot;,</span><br><span class="line">            dataType: &quot;jsonp&quot;,</span><br><span class="line">            jsonp:&quot;callback&quot;, //请求php的参数名</span><br><span class="line">            jsonpCallback: &quot;jsonhandle&quot;,//要执行的回调函数</span><br><span class="line">            success : function(data) &#123;</span><br><span class="line">                alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是JSONP&quot;&gt;&lt;a href=&quot;#什么是JSONP&quot; class=&quot;headerlink&quot; title=&quot;什么是JSONP&quot;&gt;&lt;/a&gt;什么是JSONP&lt;/h2&gt;&lt;p&gt;首先提一下JSON这个概念，JSON是一种轻量级的数据传输格式，被广泛应用于当前Web应用中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>怎么开始创建运行博客</title>
    <link href="http://yoursite.com/2018/06/13/hello-world/"/>
    <id>http://yoursite.com/2018/06/13/hello-world/</id>
    <published>2018-06-13T08:20:59.715Z</published>
    <updated>2018-06-21T00:09:41.645Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post-创建一个项目"><a href="#Create-a-new-post-创建一个项目" class="headerlink" title="Create a new post 创建一个项目"></a>Create a new post 创建一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-运行"><a href="#Run-server-运行" class="headerlink" title="Run server 运行"></a>Run server 运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-生成静态文件"><a href="#Generate-static-files-生成静态文件" class="headerlink" title="Generate static files 生成静态文件"></a>Generate static files 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-部署到远程站点"><a href="#Deploy-to-remote-sites-部署到远程站点" class="headerlink" title="Deploy to remote sites 部署到远程站点"></a>Deploy to remote sites 部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
